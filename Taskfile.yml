version: '3'

vars:
  APP_NAME: vehicle-oem-server
  APP_PORT: 8080
  DB_PORT: 5532
  DB_NAME: vehicle_oem_db
  DB_USER: vehicle_oem_user
  DB_PASSWORD: vehicle_oem_pass
  MOCK_DEVICE_OEM_PORT: 8081
  MOCK_KTS_PORT: 8082
  MOCK_TELEMATICS_PORT: 8083

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Database tasks
  db:start:
    desc: Start PostgreSQL database
    cmds:
      - |
        echo "🐘 Starting PostgreSQL database..."
        podman run -d \
          --name {{.APP_NAME}}-postgres \
          --replace \
          -e POSTGRES_DB={{.DB_NAME}} \
          -e POSTGRES_USER={{.DB_USER}} \
          -e POSTGRES_PASSWORD={{.DB_PASSWORD}} \
          -e POSTGRES_HOST_AUTH_METHOD=trust \
          -p {{.DB_PORT}}:5432 \
          -v {{.APP_NAME}}-postgres-data:/var/lib/postgresql/data:Z \
          --security-opt label=disable \
          --userns keep-id \
          docker.io/postgres:15
      - task: db:wait

  db:wait:
    desc: Wait for database to be ready
    cmds:
      - |
        echo "⏳ Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if podman exec {{.APP_NAME}}-postgres pg_isready -U {{.DB_USER}} -d {{.DB_NAME}} &>/dev/null; then
            echo "✅ PostgreSQL is ready"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ PostgreSQL failed to start within 60 seconds"
            exit 1
          fi
          sleep 2
          echo -n "."
        done

  db:stop:
    desc: Stop PostgreSQL database
    cmds:
      - |
        echo "🛑 Stopping PostgreSQL database..."
        podman stop {{.APP_NAME}}-postgres || true
        podman rm {{.APP_NAME}}-postgres || true

  db:migrate:
    desc: Run database migrations
    cmds:
      - |
        echo "🔄 Running database migrations..."
        ./mvnw flyway:migrate \
          -Dflyway.url=jdbc:postgresql://localhost:{{.DB_PORT}}/{{.DB_NAME}} \
          -Dflyway.user={{.DB_USER}} \
          -Dflyway.password={{.DB_PASSWORD}}

  db:clean:
    desc: Clean database and run migrations
    cmds:
      - |
        echo "🧹 Cleaning database and running migrations..."
        ./mvnw flyway:clean flyway:migrate \
          -Dflyway.url=jdbc:postgresql://localhost:{{.DB_PORT}}/{{.DB_NAME}} \
          -Dflyway.user={{.DB_USER}} \
          -Dflyway.password={{.DB_PASSWORD}}

  # Mock services tasks
  mocks:start:
    desc: Start all mock services
    cmds:
      - task: mock:device-oem:start
      - task: mock:kts:start
      - task: mock:telematics:start

  mock:device-oem:start:
    desc: Start Device OEM mock service
    cmds:
      - |
        echo "🎭 Starting Device OEM mock service..."
        podman run -d \
          --name {{.APP_NAME}}-device-oem-mock \
          --replace \
          -p {{.MOCK_DEVICE_OEM_PORT}}:1080 \
          -e MOCKSERVER_SERVER_PORT=1080 \
          --security-opt label=disable \
          --userns keep-id \
          docker.io/mockserver/mockserver:latest

  mock:kts:start:
    desc: Start KTS mock service
    cmds:
      - |
        echo "🎭 Starting KTS mock service..."
        podman run -d \
          --name {{.APP_NAME}}-kts-mock \
          --replace \
          -p {{.MOCK_KTS_PORT}}:1080 \
          -e MOCKSERVER_SERVER_PORT=1080 \
          --security-opt label=disable \
          --userns keep-id \
          docker.io/mockserver/mockserver:latest

  mock:telematics:start:
    desc: Start Telematics mock service
    cmds:
      - |
        echo "🎭 Starting Telematics mock service..."
        podman run -d \
          --name {{.APP_NAME}}-telematics-mock \
          --replace \
          -p {{.MOCK_TELEMATICS_PORT}}:1080 \
          -e MOCKSERVER_SERVER_PORT=1080 \
          --security-opt label=disable \
          --userns keep-id \
          docker.io/mockserver/mockserver:latest

  mocks:stop:
    desc: Stop all mock services
    cmds:
      - |
        echo "🛑 Stopping mock services..."
        podman stop {{.APP_NAME}}-device-oem-mock || true
        podman stop {{.APP_NAME}}-kts-mock || true
        podman stop {{.APP_NAME}}-telematics-mock || true
        podman rm {{.APP_NAME}}-device-oem-mock || true
        podman rm {{.APP_NAME}}-kts-mock || true
        podman rm {{.APP_NAME}}-telematics-mock || true

  # Application tasks
  app:build:
    desc: Build the application
    cmds:
      - |
        echo "🔨 Building application..."
        ./mvnw clean compile

  app:test:
    desc: Run all tests
    cmds:
      - |
        echo "🧪 Running tests..."
        ./mvnw test

  app:start:
    desc: Start the Spring Boot application
    deps: [db:start, mocks:start]
    cmds:
      - task: db:migrate
      - |
        echo "🚀 Starting {{.APP_NAME}}..."
        export SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:{{.DB_PORT}}/{{.DB_NAME}}
        export DB_USERNAME={{.DB_USER}}
        export DB_PASSWORD={{.DB_PASSWORD}}
        export DEVICE_OEM_SERVER_URL=http://localhost:{{.MOCK_DEVICE_OEM_PORT}}
        export KTS_SERVER_URL=http://localhost:{{.MOCK_KTS_PORT}}
        export VEHICLE_TELEMATICS_URL=http://localhost:{{.MOCK_TELEMATICS_PORT}}
        ./mvnw spring-boot:run

  app:start:dev:
    desc: Start the application in development mode
    deps: [db:start, mocks:start]
    cmds:
      - task: db:migrate
      - |
        echo "🚀 Starting {{.APP_NAME}} in development mode..."
        export SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:{{.DB_PORT}}/{{.DB_NAME}}
        export DB_USERNAME={{.DB_USER}}
        export DB_PASSWORD={{.DB_PASSWORD}}
        export DEVICE_OEM_SERVER_URL=http://localhost:{{.MOCK_DEVICE_OEM_PORT}}
        export KTS_SERVER_URL=http://localhost:{{.MOCK_KTS_PORT}}
        export VEHICLE_TELEMATICS_URL=http://localhost:{{.MOCK_TELEMATICS_PORT}}
        ./mvnw spring-boot:run -Dspring.profiles.active=dev

  # Lifecycle tasks
  start:
    desc: Start all services (database, mocks, application)
    cmds:
      - task: db:start
      - task: mocks:start
      - task: db:migrate
      - task: app:start

  stop:
    desc: Stop all services
    cmds:
      - |
        echo "🛑 Stopping all services..."
        pkill -f "spring-boot:run" || true
        pkill -f "{{.APP_NAME}}" || true
      - task: mocks:stop
      - task: db:stop

  restart:
    desc: Restart all services
    cmds:
      - task: stop
      - task: start

  clean:
    desc: Clean everything (containers, volumes, build artifacts)
    cmds:
      - task: stop
      - |
        echo "🧹 Cleaning up..."
        podman volume rm {{.APP_NAME}}-postgres-data || true
        ./mvnw clean

  # Status and health checks
  status:
    desc: Show status of all services
    cmds:
      - |
        echo "📊 Service Status:"
        echo "=================="
        echo ""
        echo "🐘 PostgreSQL:"
        if podman ps --format "{{.Names}}" | grep -q "{{.APP_NAME}}-postgres"; then
          echo "  ✅ Running on port {{.DB_PORT}}"
        else
          echo "  ❌ Not running"
        fi
        echo ""
        echo "🎭 Mock Services:"
        if podman ps --format "{{.Names}}" | grep -q "{{.APP_NAME}}-device-oem-mock"; then
          echo "  ✅ Device OEM Mock running on port {{.MOCK_DEVICE_OEM_PORT}}"
        else
          echo "  ❌ Device OEM Mock not running"
        fi
        if podman ps --format "{{.Names}}" | grep -q "{{.APP_NAME}}-kts-mock"; then
          echo "  ✅ KTS Mock running on port {{.MOCK_KTS_PORT}}"
        else
          echo "  ❌ KTS Mock not running"
        fi
        if podman ps --format "{{.Names}}" | grep -q "{{.APP_NAME}}-telematics-mock"; then
          echo "  ✅ Telematics Mock running on port {{.MOCK_TELEMATICS_PORT}}"
        else
          echo "  ❌ Telematics Mock not running"
        fi
        echo ""
        echo "🚀 Application:"
        if curl -s -f http://localhost:{{.APP_PORT}}/actuator/health &>/dev/null; then
          echo "  ✅ Running on port {{.APP_PORT}}"
          echo "  🌐 Health: http://localhost:{{.APP_PORT}}/actuator/health"
        else
          echo "  ❌ Not running or not healthy"
        fi

  health:
    desc: Check application health
    cmds:
      - |
        echo "🏥 Health Check:"
        curl -s http://localhost:{{.APP_PORT}}/actuator/health | jq . || echo "Application not responding"

  logs:
    desc: Show application logs (if running in background)
    cmds:
      - |
        echo "📋 Recent application logs:"
        tail -f target/logs/application.log || echo "No log file found. Application might not be running."
